# SPDX-License-Identifier: AGPL-3.0

#    ----------------------------------------------------------------------
#    Copyright Â© 2024, 2025 Guilherme Janczak,
#                           Robert Kirkman,
#                           Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.


name: ' ' # empty name
on: [push, pull_request]

jobs:
  # This is what is currently necessary to make termux-docker work with GHA.
  working:
    strategy:
      matrix:
        include:
          - runner:
              ubuntu-24.04
            architecture:
              i686
          - runner:
              ubuntu-24.04
            architecture:
              x86_64
          - runner:
              ubuntu-24.04-arm
            architecture:
              arm
          - runner:
              ubuntu-24.04-arm
            architecture:
              aarch64
    runs-on:
      ${{ matrix.runner }}
    # prepare writable volume prefix mount for actions/upload-artifact,
    # based on the higher-profile workaround for 32-bit GNU/Linux containers explained here
    # https://github.com/actions/upload-artifact/issues/616#issuecomment-2350667347
    container:
      image:
        termux/termux-docker:${{ matrix.architecture }}
      volumes: 
        - /tmp/node20:/__e/node20
    # approximate environment variables for actions that can't be forced to use entrypoint.sh
    env:
      TERMUX_MAIN_PACKAGE_FORMAT:
        debian
      ANDROID_ROOT:
        /system
      ANDROID_DATA:
        /data
      PREFIX:
        /data/data/com.termux/files/usr
      HOME:
        /data/data/com.termux/files/home
      PATH:
        /data/data/com.termux/files/usr/bin
      TMPDIR:
        /data/data/com.termux/files/usr/tmp
      LANG:
        en_US.UTF-8
      TZ:
        UTC
    steps:
      - name:
          Set pkg command to use the packages-cf.termux.dev mirror.
        run: |
          ln \
            -sf \
            "${PREFIX}/etc/termux/mirrors/default" \
            "${PREFIX}/etc/termux/chosen_mirrors"
      - name:
          Upgrade Termux debian environment.
        run: |
          /entrypoint.sh \
            bash \
              -c \
                "yes | pkg upgrade -y"
      # actions/checkout will "think" that termux's tar binary isn't executable if it doesn't have
      # executable bit actually set for all users, since even though that permissions restriction
      # doesn't actually apply to the root user (at least on Android), GitHub Actions' internal
      # source code doesn't "care" and would refuse to run the binary anyway.
      # relevant internal source code of GitHub Actions:
      # https://github.com/actions/toolkit/blob/930c89072712a3aac52d74b23338f00bb0cfcb24/packages/io/src/io-util.ts#L167-L177
      - name:
          Fix executable bit for all binaries in "${PREFIX}/bin" for all users.
        run: |
          chmod \
            -R \
            "o+x" \
            "${PREFIX}/bin"
      - name:
          Install bionic-libc NodeJS to force compatibility with actions/checkout and actions/upload-artifact.
        run: |
          /entrypoint.sh \
            pkg \
              install \
                -y \
                "nodejs-lts"
          ln \
            -sf \
            "${PREFIX}/bin" \
            "/__e/node20/bin"
      - uses:
          actions/checkout@v4.2.2
      - name:
          Fix permissions of repository after actions/checkout, which ran as root user, while entrypoint.sh activates system user (1000).
        run: |
          chown \
            -R \
            "1000:1000" \
            "$(pwd)"
      - name:
          Setup user's home.
        run: |
          # Setup home
          /entrypoint.sh \
            mkdir \
              -p \
              "${HOME}"
      - name:
          Install Python.
        run: |
          /entrypoint.sh \
            pkg \
              install \
                -y \
                "python"
      - name:
          Install Git.
        run: |
          /entrypoint.sh \
            pkg \
              install \
                -y \
                "git"
      - name:
          Install Pacman.
        run: |
          /entrypoint.sh \
            pkg \
              install \
                -y \
                "pacman" \
                "termux-keyring" \
                "tree" \
                "tsu"
          # Init keyring
          /entrypoint.sh \
            pacman-key \
              --init
      - name:
          Install Crash Bash Library.
        run: |
          /entrypoint.sh git \
              clone \
                --branch="libcrash-bash" \
                --single-branch \
                --depth=1 \
                "https://github.com/themartiancompany/fur" \
                "${HOME}/fur"
          /entrypoint.sh \
            rm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh \
            pacman \
              -Udd \
              --noconfirm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            rm \
              -rf \
              "${HOME}/fur"
      - name:
          Install Fur.
        run: |
          /entrypoint.sh \
            git \
              clone \
                --branch="fur" \
                --single-branch \
                --depth=1 \
                "https://github.com/themartiancompany/fur" \
                "${HOME}/fur"
          /entrypoint.sh \
            rm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh \
            pacman \
              -Udd \
              --noconfirm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            rm \
              -rf \
              "${HOME}/fur"
      - name:
          Install latest Fur.
        run: |
          /entrypoint.sh \
            git \
              clone \
                --branch="main" \
                --single-branch \
                --depth=1 \
                "https://github.com/themartiancompany/fur" \
                "${HOME}/fur-src"
      - name:
          Install Python Pygments.
        run: |
          /entrypoint.sh \
            fur \
              -v \
              -p \
                "pacman" \
              -d \
              "python-pygments"
          /entrypoint.sh \
            rm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh \
            tree \
              "${HOME}"
          /entrypoint.sh \
            pacman \
              -Udd \
              --noconfirm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            rm \
              -rf \
              "${HOME}/fur"
      - name:
          Install reallymakepkg.
        run: |
          /entrypoint.sh \
            fur \
              -v \
              -p \
                "pacman" \
              -d \
              "reallymakepkg"
          /entrypoint.sh \
            rm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh \
            tree \
              "${HOME}"
          /entrypoint.sh \
            pacman \
              -Udd \
              --noconfirm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            rm \
              -rf \
              "${HOME}/fur"
      - name:
          Install 'build essential' ahah.
        run: |
          /entrypoint.sh \
            pkg \
              install \
                -y \
                binutils \
                bsdtar \
                file \
                build-essential
      - name:
          Install make.
        run: |
          /entrypoint.sh \
            pkg \
              install \
                -y \
                "make"
      - name:
          Install Python Docutils.
        run: |
          /entrypoint.sh \
            fur \
              -v \
              -p \
                "pacman" \
              -d \
              "python-docutils"
          /entrypoint.sh \
            rm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh \
            pacman \
              -Udd \
              --noconfirm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            rm \
              -rf \
              "${HOME}/fur"
      - name:
          Install EVM Chains Info.
        run: |
          /entrypoint.sh \
            fur \
              -v \
              -p \
                "pacman" \
              -d \
              "evm-chains-info"
          /entrypoint.sh \
            rm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh \
            pacman \
              -Udd \
              --noconfirm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            rm \
              -rf \
              "${HOME}/fur"
      - name:
          Install EVM Chains Explorers.
        run: |
          /entrypoint.sh \
            fur \
              -v \
              -p \
                "pacman" \
              -d \
              "evm-chains-explorers"
          /entrypoint.sh \
            rm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh \
            pacman \
              -Udd \
              --noconfirm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            rm \
              -rf \
              "${HOME}/fur"
      - name:
          Install LibEVM.
        run: |
          /entrypoint.sh \
            fur \
              -v \
              -p \
                "pacman" \
              -d \
              "libevm"
          /entrypoint.sh \
            rm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh \
            pacman \
              -Udd \
              --noconfirm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            rm \
              -rf \
              "${HOME}/fur"
      - name:
          Install EVM Contracts Tools.
        run: |
          /entrypoint.sh \
            fur \
              -v \
              -p \
                "pacman" \
              -d \
              "evm-contracts-tools"
          /entrypoint.sh \
            rm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*".sig"
          /entrypoint.sh \
            pacman \
              -Udd \
              --noconfirm \
              "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            rm \
              -rf \
              "${HOME}/fur"
      - name:
          setup
        run: |
          # pkg/pip need to be prefixed with /entrypoint.sh because GHA overrode
          # the entrypoint.
          /entrypoint.sh \
            pkg \
              install \
                -y \
                "clang" \
                "ninja"
          # /entrypoint.sh gpg --homedir /data/data/com.termux/files/usr/etc/pacman.d/gnupg --recv-keys "998DE27318E867EA976BA877389CEED64573DFCA"
          # /entrypoint.sh pacman -Sy termux-keyring
          /entrypoint.sh \
            pip \
              install \
              "meson"
      - name: build
        # run: touch artifact
        run: |
          # Container info:
          # /entrypoint.sh \
          #   echo \
          #     "OS: $( \
          #       uname \
          #         -o)"
          # /entrypoint.sh \
          #   echo \
          #     "Current position in container: $( \
          #        pwd)"
          # /entrypoint.sh \
          #   echo \
          #     "Root contents: $( \
          #        pwd)"
          # /entrypoint.sh \
          #   echo \
          #     "Root directory: ${HOME}"
          # /entrypoint.sh \
          #   tree \
          #     -L \
          #       2 \
          #     "/"
          # Install reallymakepkg with latest fur
          # /entrypoint.sh \
          #   mkdir \
          #     -p \
          #     "${HOME}/reallymakepkg-fur"
          # /entrypoint.sh \
          #   bash \
          #     "${HOME}/fur-src/fur/fur" \
          #       -v \
          #       -p \
          #         "pacman" \
          #       -d \
          #       -o \
          #         "${HOME}/reallymakepkg-fur" \
          #       "reallymakepkg"
          # Install reallymakepkg with stable fur
          # /entrypoint.sh \
          #   pacman -Udd \
          #     --noconfirm \
          #     "${HOME}/fur/termux/any/"*".pkg.tar."*
          /entrypoint.sh \
            reallymakepkg \
              -v \
              -w \
                "${HOME}/libcrash-bash-build" \
              -- \
              -df \
              --nocheck
          /entrypoint.sh \
            echo \
              "${HOME}"
          find \
            "$(pwd)"
          # /entrypoint.sh \
          #   git \
          #     clone \
          #       "https://github.com/themartiancompany/libcrash-bash-ur" \
          #       "${HOME}/libcrash-bash"
          # /entrypoint.sh cd "$(pwd)/libcrash-bash" && makepkg
      - uses:
          actions/upload-artifact@v4.6.0
        with:
          name:
            artifact-${{ matrix.architecture }}
          path:
            libcrash-bash-docs-0.0.0.0.0.1.1-1-any.pkg.tar.xz

  # This is the ideal way termux-docker would work with GHA.
  broken-ideal:
    if:
      false
    runs-on:
      ubuntu-latest
    container:
      termux/termux-docker:x86_64
    steps:
      - name:
          setup
        run: |
          pkg \
            install \
              -y \
              "ninja" \
              "clang" \
          pip \
            install \
            "meson"
      - uses:
          actions/checkout@v3.3.0
      - name:
          build
        run:
          touch \
            artifact
      - uses:
          actions/upload-artifact@v3.1.2
        if:
          always()
        with:
          name:
            artifact
          path:
            artifact
